#!/usr/bin/env bash

set -x

# Reduce dirty bytes for USB devices, to make it write more directly to storage, instead to cache

block_device="${1}"
vendor_id="${2}"
model_id="${3}"

# Determine current USB device speed, as ATTRS{speed} is unreliable - it detects xHCI USB speed instead of proper USB speed
current_usb_speed=$(lsusb -t -v | awk -v vendor_id="${vendor_id}" -v model_id="${model_id}" '$0 ~ vendor_id ":" model_id {split(prev, a, " "); print a[length(a)]} {prev=$0}' | grep -o '[0-9]*\.[0-9]*\|[0-9]*')

# Handle the case if float is with , as decimal separator
if [[ $(echo "${current_usb_speed}" | wc -l) -gt 1 ]]; then
  echo "Cannot determine current USB speed for the device to write custom max_bytes dirty value"
  echo "Exiting"
  exit 1
fi

# If current USB speed is somehow not determined or wrongly parsed, then stop the script
# if it's empty or if USB speed is not in integer or floats
if [[ -z "${current_usb_speed}" ]] || [[ ! "${current_usb_speed}" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
  echo "Cannot determine current USB speed for the device to write custom max_bytes dirty value"
  echo "Exiting"
  exit 1
fi

# apply strict limit to dirty bytes
strict_limit=1
echo "${strict_limit}" > "/sys/block/${block_device}/bdi/strict_limit"

buffer_time="0.05"
safety_factor="1.3"
max_bytes_calculation=$(echo "((${current_usb_speed} / 8) * ${buffer_time} * ${safety_factor}) * 1024 * 1024" | bc)
max_bytes=$(echo "${max_bytes_calculation}" | awk '{print ($1 - int($1) > 0.5) ? int($1) + 1 : int($1)}')
# General max_bytes ideal value results (thanks to MegaVolt from Manjaro forums):
# 12.5MB/s: 62915
# 100MB/s: 817889
# 500MB/s: 4225761
# 1000MB/s: 8514437
# 5000MB/s: 42593157
# 10000MB/s: 85196800

# apply bandwidth defined value
echo "${max_bytes}" > "/sys/block/${block_device}/bdi/max_bytes"
