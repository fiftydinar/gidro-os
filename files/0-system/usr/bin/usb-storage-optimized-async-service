#!/usr/bin/env bash

set -x

# Oneshot service script for usb-storage-optimized-async, as a fallback when udev triggers too early during the boot
# for the script to apply (before login shell), so no USB replug to make the rule work is needed in that case

# Limit the amount of disk cache for USB storage devices, to ensure that writing speed is correct, as opposed to async
# sync is too slow & has a risk for deteorating USB storage data health, so that's why this balanced solution is being done
# See the link below for more details
# https://github.com/ublue-os/packages/issues/677
#
# Credits:
# - Megavolt (from Manjaro forums): for making it possible through his benchmarks, testings, findings & initial udev rule + script

get_usb_storage_block() {
    idV="${1%:*}"
    idP="${1#*:}"
    for path in $(find /sys/ -name idVendor | rev | cut -d/ -f 2- | rev); do
        if grep -q "$idV" "$path/idVendor"; then
            if grep -q "$idP" "$path/idProduct"; then
                basename "$(realpath --relative-base="$path" /sys/block/* | grep -vm 1 "^/")" 2>/dev/null
            fi
        fi
    done
}

readarray -t USB_VENDOR_MODEL < <(lsusb -v -t | awk '/Driver=usb-storage/{getline; gsub(/^[ \t]+|[ \t]+$/, "", $0); print $0}' | awk '/ID/{print $2}')
if [ "${#USB_VENDOR_MODEL[@]}" -eq 0 ]; then
  exit 0
fi
for usb_vendor_model in "${USB_VENDOR_MODEL[@]}"; do
    usb_vendor="$(echo "$usb_vendor_model" | awk -F':' '{print $1}')"
    usb_model="$(echo "$usb_vendor_model" | awk -F':' '{print $2}')"
    block_device="$(get_usb_storage_block "$usb_vendor:$usb_model")"
    strict_limit=1
    # apply strict limit to max_bytes of disk cache
    if [ -e "/sys/block/${block_device}" ]; then
      echo "${strict_limit}" > "/sys/block/${block_device}/bdi/strict_limit"
    else
      echo "This block device ${block_device} doesn't exist"
      continue
    fi
    current_usb_speed=$(lsusb -t -v | awk -v vendor_id="${usb_vendor}" -v model_id="${usb_model}" '$0 ~ vendor_id ":" model_id {split(prev, a, " "); print a[length(a)]} {prev=$0}' | grep -o '[0-9]*\.[0-9]*\|[0-9]*')
    # Handle the case if float is with , as decimal separator
    if [[ $(echo "${current_usb_speed}" | wc -l) -gt 1 ]]; then
      echo "Cannot determine current USB speed for this device to write custom max_bytes dirty value"
      continue
    fi
    # If current USB speed is somehow not determined or wrongly parsed, then stop the script
    # if it's empty or if USB speed is not in integer or floats
    if [[ -z "${current_usb_speed}" ]] || [[ ! "${current_usb_speed}" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
      echo "Cannot determine current USB speed for the device to write custom max_bytes dirty value"
      continue
    fi
    buffer_time="0.05"
    safety_factor="1.3"
    max_bytes_calculation=$(echo "((${current_usb_speed} / 8) * ${buffer_time} * ${safety_factor}) * 1024 * 1024" | bc)
    max_bytes=$(echo "${max_bytes_calculation}" | awk '{print ($1 - int($1) > 0.5) ? int($1) + 1 : int($1)}')
    # General max_bytes ideal value results (thanks to MegaVolt from Manjaro forums):
    # 12.5MB/s: 62915
    # 100MB/s: 817889
    # 500MB/s: 4225761
    # 1000MB/s: 8514437
    # 5000MB/s: 42593157
    # 10000MB/s: 85196800
    # apply bandwidth defined value
    if [ -e "/sys/block/${block_device}" ]; then
      echo "${max_bytes}" > "/sys/block/${block_device}/bdi/max_bytes"
    else
      echo "This block device ${block_device} doesn't exist"
      continue
    fi
done
