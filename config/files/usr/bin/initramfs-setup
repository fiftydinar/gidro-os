#!/usr/bin/env bash

# Global initramfs variables - Needed initramfs file arguments contain tracked file arguments dictated by the module & by the live-user
tracked_file="/etc/ublue-os/initramfs/tracked"
custom_tracked_file="/etc/ublue-os/initramfs/tracked-custom"
readarray -t current < <(rpm-ostree initramfs-etc | tr -d ' ' | tail -n +2)

# Make sure that fetched needed initramfs values support all file scenarios
if [ -f "$tracked_file" ] && [ ! -f "$custom_tracked_file" ]; then
readarray -t needed < <(grep -v -E '^#|^$' "$tracked_file")
fi
if [ ! -f "$tracked_file" ] && [ -f "$custom_tracked_file" ]; then
readarray -t needed < <(grep -v -E '^#|^$' "$custom_tracked_file")
fi
if [ -f "$tracked_file" ] && [ -f "$custom_tracked_file" ]; then
readarray -t needed < <(grep -v -E '^#|^$' "$tracked_file" && grep -v -E '^#|^$' "$custom_tracked_file")
fi

applies_tracking=false
applies_untracking=false

# Print current initramfs file arguments
printf "Current initramfs:\n"
for current_file in "${current[@]}"; do
    printf "%s\n" "$current_file"
done

# If current initramfs is missing needed file arguments, make them ready for tracking
for needed_arg in "${needed[@]}"; do
  found=false
  for current_arg in "${current[@]}"; do
    if [[ "$current_arg" == "$needed_arg" || "${#current_arg[@]}" -gt "${#needed_arg[@]}" ]]; then
      found=true
      break
    fi
  done
  # If "needed initramfs" has more array elements than "current initramfs", prepare for tracking
  if ! $found; then
    applies_tracking=true
  fi
done

# If there are file arguments in current initramfs, that are not present in needed initramfs, make them ready for untracking
for current_arg in "${current[@]}"; do
  found=false
  for needed_arg in "${needed[@]}"; do
    if [[ "$needed_arg" == "$current_arg" || "${#needed_arg[@]}" -gt "${#current_arg[@]}" ]]; then
      found=true
      break
    fi
  done
  # If "current initramfs" has more array elements than "needed initramfs", prepare for untracking
  if ! $found; then
    applies_untracking=true
    untracked+=("$current_arg")
  fi
done

# Apply --track= & --untrack= prefixes to tracked & untracked file arguments
tracked_args=("${needed[@]/#/--track=}")
untracked_args=("${untracked[@]/#/--untrack=}")

# Track & untrack file arguments based on given data + ready conditions, mostly displays boot screen messages & reboots. Also supports dracut.
if $applies_tracking || $applies_untracking; then

# Tracked initramfs
  if $applies_tracking && ! $applies_untracking; then
    printf "Found needed tracking initramfs changes, applying the following: %s\n" "${needed[*]}"
    plymouth display-message --text="Updating initramfs - System will reboot" || true
    rpm-ostree initramfs-etc "${tracked_args[@]}" --reboot

# Untracked initramfs
  elif ! $applies_tracking && $applies_untracking; then
    printf "Found needed removal of non-active tracked files, removing the following: %s\n" "${untracked[*]}"
    plymouth display-message --text="Updating initramfs - System will reboot" || true
    rpm-ostree initramfs-etc "${untracked_args[@]}" --reboot

# Tracked & untracked initramfs
  elif $applies_tracking && $applies_untracking; then
    printf "Found needed tracking initramfs changes, applying the following: %s\n" "${needed[*]}"
    printf "Also applying needed removal of non-active tracked files: %s\n" "${untracked[*]}"
    plymouth display-message --text="Updating initramfs - System will reboot" || true
    rpm-ostree initramfs-etc "${tracked_args[@]}" "${untracked_args[@]}" --reboot

else
  echo "No initramfs changes detected"
fi
